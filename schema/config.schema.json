{
  "$id": "/heimdall/config.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Heimdall Configuration",
  "type": "object",
  "definitions": {
    "tlsConfig": {
      "title": "TLS Configuration",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "key": {
          "title": "Private Key (PEM)",
          "type": "string",
          "format": "uri",
          "description": "URI pointing to a PEM encoded key",
          "examples": [
            "/path/to/key.pem"
          ]
        },
        "cert": {
          "title": "TLS Certificate (PEM)",
          "type": "string",
          "format": "uri",
          "description": "URI pointing to a PEM encoded certificate",
          "examples": [
            "/path/to/cert.pem"
          ]
        }
      }
    },
    "corsConfig": {
      "title": "Cross Origin Resource Sharing (CORS)",
      "description": "Configure [Cross Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/) using the following options.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "allowed_origins": {
          "title": "Allowed Origins",
          "description": "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: https://*.domain.com). Usage of wildcards implies a small performance penalty. Only one wildcard can be used per origin.",
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "default": [
            "*"
          ],
          "uniqueItems": true,
          "examples": [
            [
              "https://example.com",
              "https://*.example.com",
              "https://*.foo.example.com"
            ]
          ]
        },
        "allowed_methods": {
          "type": "array",
          "title": "Allowed HTTP Methods",
          "description": "A list of methods the client is allowed to use with cross-domain requests.",
          "items": {
            "type": "string",
            "enum": [
              "GET",
              "HEAD",
              "POST",
              "PUT",
              "DELETE",
              "CONNECT",
              "TRACE",
              "PATCH"
            ]
          },
          "uniqueItems": true,
          "default": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE"
          ]
        },
        "allowed_headers": {
          "description": "A list of non simple headers the client is allowed to use with cross-domain requests.",
          "title": "Allowed Request HTTP Headers",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minLength": 1,
          "uniqueItems": true,
          "default": [
            "Authorization",
            "Content-Type"
          ]
        },
        "exposed_headers": {
          "description": "Indicates which headers are safe to expose to the API of a CORS API specification",
          "title": "Allowed Response HTTP Headers",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minLength": 1,
          "uniqueItems": true,
          "default": [
            "Content-Type"
          ]
        },
        "allow_credentials": {
          "type": "boolean",
          "title": "Allow HTTP Credentials",
          "default": false,
          "description": "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
        },
        "max_age": {
          "type": "integer",
          "default": 0,
          "title": "Maximum Age",
          "description": "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
        }
      }
    },
    "timeoutConfig": {
      "title": "HTTP Timeouts",
      "description": "Control the HTTP timeouts.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "read": {
          "title": "HTTP Read Timeout",
          "type": "string",
          "default": "5s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "description": "The maximum duration for reading the entire request, including the body.",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        },
        "write": {
          "title": "HTTP Write Timeout",
          "type": "string",
          "default": "120s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "description": "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly.",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        },
        "idle": {
          "title": "HTTP Idle Timeout",
          "type": "string",
          "default": "120s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
          "description": " The maximum amount of time to wait for any action of a request session, reading data or writing the response.",
          "examples": [
            "5s",
            "5m",
            "5h"
          ]
        }
      }
    },
    "serviceConfig": {
      "title": "Service Configuration",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "port": {
          "type": "integer",
          "title": "Port",
          "description": "The port to listen on."
        },
        "host": {
          "type": "string",
          "default": "",
          "examples": [
            "localhost",
            "127.0.0.1"
          ],
          "title": "Host",
          "description": "The network interface to listen on."
        },
        "timeout": {
          "$ref": "#/definitions/timeoutConfig"
        },
        "cors": {
          "$ref": "#/definitions/corsConfig"
        },
        "tls": {
          "$ref": "#/definitions/tlsConfig"
        }
      }
    },
    "prometheusConfig": {
      "type": "object",
      "title": "Prometheus scraping endpoint",
      "additionalProperties": false,
      "properties": {
        "port": {
          "type": "integer",
          "default": 9000,
          "title": "Port",
          "description": "The port to listen on."
        },
        "host": {
          "type": "string",
          "default": "",
          "examples": [
            "localhost",
            "127.0.0.1"
          ],
          "title": "Host",
          "description": "The network interface to listen on. Leave empty to listen on all interfaces."
        },
        "metrics_path": {
          "type": "string",
          "default": "/metrics",
          "title": "Path",
          "description": "The path to provide metrics on"
        },
        "collapse_request_paths": {
          "type": "boolean",
          "default": true,
          "title": "CollapsePaths",
          "description": "When set to true the request label will include just the first segment of the request path"
        }
      }
    },
    "sessionConfiguration": {
      "description": "Session information about the subject to maintain",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "extra_from": {
          "title": "Extra JSON Path",
          "description": "The `extra` field in the Heimdall authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference.",
          "type": "string",
          "default": "extra"
        },
        "subject_from": {
          "title": "Subject JSON Path",
          "description": "The `subject` field in the Heimdall authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference.",
          "type": "string",
          "default": "subject"
        },
        "cache": {
          "title": "Cache",
          "description": "Allows reuse of previously received data",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Whether the cache is enabled or not",
              "default": false
            },
            "ttl": {
              "title": "Cache Time to Live",
              "description": "How long the received data should be reused",
              "type": "string",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "examples": [
                "5s"
              ]
            }
          }
        }
      }
    },
    "endpointConfiguration": {
      "description": "Endpoint to get the information about the authenticated user from",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "description": "The URL to get information about the authenticated user from",
          "type": "string",
          "format": "uri",
          "examples": [
            "https://session-store-host"
          ]
        },
        "method": {
          "title": "HTTP Method",
          "description": "HTTP Method to use when communicating with the endpoint",
          "type": "string",
          "default": "GET",
          "examples": [
            "GET",
            "POST"
          ]
        },
        "headers": {
          "description": "HTTP headers to be send to the end point",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "minLength": 0,
          "uniqueItems": true,
          "default": []
        },
        "retry": {
          "type": "object",
          "title": "Retry",
          "description": "How the implementation should behave when trying to access the configured endpoint",
          "additionalProperties": false,
          "properties": {
            "give_up_after": {
              "description": "When the implementation should finally give up, if the endpoint is not answering.",
              "type": "string",
              "default": "1s",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
            },
            "max_delay": {
              "description": "How long the implementation should wait between the attempts",
              "type": "string",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "100ms"
            }
          }
        },
        "auth": {
          "type": "object",
          "description": "How to authenticate against the endpoint",
          "oneOf": [
            {
              "$ref": "#/definitions/endpointAuthApiKeyProperties"
            },
            {
              "$ref": "#/definitions/endpointAuthBasicAuthProperties"
            },
            {
              "$ref": "#/definitions/endpointAuthClientCredentialsProperties"
            }
          ]
        }
      }
    },
    "endpointAuthBasicAuthProperties": {
      "properties": {
        "type": {
          "const": "basic_auth"
        },
        "config": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "description": "user name for basic auth"
            },
            "password": {
              "type": "string",
              "description": "password for basic auth"
            }
          },
          "additionalProperties": false,
          "required": [
            "user",
            "password"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ]
    },
    "endpointAuthApiKeyProperties": {
      "properties": {
        "type": {
          "const": "api_key"
        },
        "config": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the api key"
            },
            "value": {
              "type": "string",
              "description": "The value of the api key"
            },
            "in": {
              "type": "string",
              "description": "How the api key should be transferred",
              "enum": [
                "header",
                "cookie"
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "value",
            "in"
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ]
    },
    "endpointAuthClientCredentialsProperties": {
      "additionalProperties": false,
      "required": [
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "client_credentials"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "client_id",
            "client_secret",
            "token_url"
          ],
          "properties": {
            "client_id": {
              "type": "string",
              "description": "The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant"
            },
            "client_secret": {
              "type": "string",
              "description": "The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant"
            },
            "token_url": {
              "type": "string",
              "description": "The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed"
            },
            "audience": {
              "type": "string",
              "description": "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant"
            },
            "scopes": {
              "type": "array",
              "description": "The OAuth 2.0 Scopes to be requested during the OAuth 2.0 Client Credentials Grant",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "authenticationDataSource": {
      "description": "Where does the request contain authentication information, like header cookie, ets",
      "type": "array",
      "additionalItems": false,
      "items": {
        "anyOf": [
          {
            "type": "object",
            "description": "The header (case insensitive) that contains the authentication information.",
            "additionalProperties": false,
            "required": [
              "header"
            ],
            "properties": {
              "header": {
                "type": "string"
              },
              "strip_prefix": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "The cookie (case sensitive) that contains the authentication information.",
            "additionalProperties": false,
            "required": [
              "cookie"
            ],
            "properties": {
              "cookie": {
                "type": "string"
              },
              "strip_prefix": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "The query parameter (case sensitive) that contains the authentication information.",
            "additionalProperties": false,
            "required": [
              "query_parameter"
            ],
            "properties": {
              "query_parameter": {
                "type": "string"
              },
              "strip_prefix": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "The form parameter (case sensitive) that contains the authentication information.",
            "additionalProperties": false,
            "required": [
              "form_parameter"
            ],
            "properties": {
              "form_parameter": {
                "type": "string"
              },
              "strip_prefix": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "assertionRequirements": {
      "description": "Defines verification requirements for the assertion, like the introspection response or a JWT token",
      "type": "object",
      "properties": {
        "scope_strategy": {
          "description": "Sets the strategy validation algorithm.",
          "type": "string",
          "default": "exact",
          "enum": [
            "hierarchic",
            "exact",
            "wildcard"
          ]
        },
        "required_scopes": {
          "description": "An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.\n If the token used in the Authorization header did not request that specific scope, the request is denied.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target_audiences": {
          "description": "An array of audiences that are required when accessing an endpoint protected by this handler.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "trusted_issuers": {
          "title": "Trusted Issuers",
          "description": "The assertion/token must have been issued by one of the issuers listed in this array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowed_algorithms": {
          "description": "If the assertion (introspection response or JWT token) is signed, which algorithms are allowed",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "authenticatorAnonymous": {
      "title": "Anonymous Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "anonymous"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "subject": {
              "title": "Anonymous Subject",
              "description": "Sets the anonymous username.",
              "type": "string",
              "examples": [
                "guest",
                "anon",
                "unknown"
              ],
              "default": "anonymous"
            }
          }
        }
      }
    },
    "authenticatorNoop": {
      "title": "Noop Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "noop"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        }
      }
    },
    "authenticatorUnauthorized": {
      "title": "Unauthorized Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "unauthorized"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        }
      }
    },
    "authenticatorAuthenticationData": {
      "title": "Authentication Data Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "authentication_data"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "Authentication Data Authenticator Configuration",
          "additionalProperties": false,
          "required": [
            "identity_info_endpoint"
          ],
          "properties": {
            "identity_info_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "authentication_data_source": {
              "$ref": "#/definitions/authenticationDataSource"
            },
            "session": {
              "$ref": "#/definitions/sessionConfiguration"
            }
          }
        }
      }
    },
    "authenticatorOAuth2Introspection": {
      "title": "OAuth2 Introspection Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "oauth2_introspection"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "OAuth2 Introspection Configuration",
          "additionalProperties": false,
          "required": [
            "introspection_endpoint"
          ],
          "properties": {
            "introspection_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "introspection_response_assertions": {
              "$ref": "#/definitions/assertionRequirements"
            },
            "session": {
              "$ref": "#/definitions/sessionConfiguration"
            }
          }
        }
      }
    },
    "authenticatorJwt": {
      "title": "JWT Authenticator",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "jwt"
        },
        "id": {
          "type": "string",
          "title": "Unique Authenticator ID",
          "description": "The id of the authenticator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "JWT Authenticator Configuration",
          "additionalProperties": false,
          "required": [
            "jwks_endpoint"
          ],
          "properties": {
            "jwks_endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "jwt_token_from": {
              "$ref": "#/definitions/authenticationDataSource"
            },
            "jwt_assertions": {
              "$ref": "#/definitions/assertionRequirements"
            },
            "session": {
              "$ref": "#/definitions/sessionConfiguration"
            }
          }
        }
      }
    },
    "authorizerAllow": {
      "title": "Allow Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "allow"
        },
        "id": {
          "type": "string",
          "title": "Unique Authorizer ID",
          "description": "The id of the authorizer to be used in the rule definition"
        }
      }
    },
    "authorizerDeny": {
      "title": "Deny Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "deny"
        },
        "id": {
          "type": "string",
          "title": "Unique Authorizer ID",
          "description": "The id of the authorizer to be used in the rule definition"
        }
      }
    },
    "authorizerRemote": {
      "title": "Remote Authorizer",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "const": "remote"
        },
        "id": {
          "type": "string",
          "title": "Unique Authorizer ID",
          "description": "The id of the authorizer to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "Remote Authorizer Configuration",
          "additionalProperties": false,
          "required": [
            "endpoint"
          ],
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "payload": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uri",
                  "pattern": "^(http|https|file|base64)://",
                  "description": "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads",
                  "examples": [
                    "file:///path/to/body.jsonnet",
                    "file://./body.jsonnet",
                    "base64://ZnVuY3Rpb24oY3R4KSB7CiAgaWRlbnRpdHlfaWQ6IGlmIGN0eFsiaWRlbnRpdHkiXSAhPSBudWxsIHRoZW4gY3R4LmlkZW50aXR5LmlkLAp9=",
                    "https://test.com/default_body.jsonnet"
                  ]
                },
                {
                  "const": "original_body"
                }
              ]
            },
            "forward_response_headers": {
              "description": "A list of headers to forward to the upstream service.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            }
          }
        }
      }
    },
    "hydratorDefault": {
      "title": "Default Hydrator",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "id",
        "config"
      ],
      "properties": {
        "type": {
          "const": "default"
        },
        "id": {
          "type": "string",
          "title": "Unique Hydrator ID",
          "description": "The id of the hydrator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "Default Hydrator Configuration",
          "additionalProperties": false,
          "anyOf": [
            {
              "required": [
                "endpoint",
                "headers"
              ]
            },
            {
              "required": [
                "endpoint",
                "payload"
              ]
            }
          ],
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/endpointConfiguration"
            },
            "headers": {
              "description": "HTTP headers to be send to the hydrator end point",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            },
            "payload": {
              "type": "string",
              "format": "uri",
              "pattern": "^(http|https|file|base64)://",
              "description": "URI pointing to the jsonnet template used for payload generation. Only used for those HTTP methods, which support HTTP body payloads",
              "examples": [
                "file:///path/to/body.jsonnet",
                "file://./body.jsonnet",
                "base64://ZnVuY3Rpb24oY3R4KSB7CiAgaWRlbnRpdHlfaWQ6IGlmIGN0eFsiaWRlbnRpdHkiXSAhPSBudWxsIHRoZW4gY3R4LmlkZW50aXR5LmlkLAp9=",
                "https://test.com/default_body.jsonnet"
              ]
            }
          }
        }
      }
    },
    "mutatorJwt": {
      "title": "JWT Mutator",
      "description": "Creates a JWT Token from the given session information",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "jwt"
        },
        "id": {
          "type": "string",
          "title": "Unique Mutator ID",
          "description": "The id of the mutator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "title": "JWT Mutator Configuration",
          "additionalProperties": false,
          "required": [
            "issuer"
          ],
          "properties": {
            "claims": {
              "type": "string"
            },
            "issuer": {
              "type": "string",
              "title": "Issuer URL",
              "description": "Sets the \"iss\" value of the JWT Token."
            },
            "ttl": {
              "type": "string",
              "title": "Expire After",
              "description": "Sets the time-to-live of the JSON Web Token.",
              "pattern": "^[0-9]+(ns|us|ms|s|m|h)$",
              "default": "15m",
              "examples": [
                "1h",
                "1m",
                "30s"
              ]
            }
          }
        }
      }
    },
    "mutatorHeader": {
      "title": "Header Mutator",
      "description": "Transforms the request, allowing you to pass the credentials to the upstream application via the headers",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "header"
        },
        "id": {
          "type": "string",
          "title": "Unique Mutator ID",
          "description": "The id of the mutator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "headers"
          ],
          "properties": {
            "headers": {
              "description": "HTTP headers to be send to the upstream service",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            }
          }
        }
      }
    },
    "mutatorCookie": {
      "title": "Cookie Mutator",
      "description": "Transforms the request, allowing you to pass the credentials to the upstream application via cookies",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "cookie"
        },
        "id": {
          "type": "string",
          "title": "Unique Mutator ID",
          "description": "The id of the mutator to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "cookies"
          ],
          "properties": {
            "cookies": {
              "description": "HTTP cookies to be send to the upstream service",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "minLength": 0,
              "uniqueItems": true,
              "default": []
            }
          }
        }
      }
    },
    "errorsWhen": {
      "title": "Error Handler Conditions",
      "description": "Conditions set under which circumstances an error handler should be responsible for handling the request. If no conditions are given, the error handler will be responsible for all requests. Sections error and request are combined using AND.",
      "type": "array",
      "additionalItems": false,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "title": "Error Type Conditions",
            "description": "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler.",
            "type": "array",
            "additionalItems": false,
            "items": {
              "type": "string",
              "enum": [
                "unauthorized",
                "forbidden",
                "internal_server_error",
                "not_found"
              ]
            }
          },
          "request": {
            "title": "HTTP Request Conditions",
            "description": "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND.",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "cidr": {
                "title": "Client IP CIDR Mask",
                "description": "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16.",
                "type": "array",
                "additionalItems": false,
                "items": {
                  "type": "string"
                }
              },
              "header": {
                "title": "HTTP Request Header Conditions",
                "description": "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "content_type": {
                    "type": "array",
                    "title": "HTTP Request Header Content Type Condition",
                    "description": "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match.",
                    "additionalItems": false,
                    "item": {
                      "type": "string"
                    }
                  },
                  "accept": {
                    "type": "array",
                    "title": "HTTP Request Header Accept Condition",
                    "description": "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match.",
                    "additionalItems": false,
                    "item": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "errorHandlerWWWAuthenticate": {
      "title": "WWW-Authenticate Error Handler",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "www-authenticate"
        },
        "id": {
          "type": "string",
          "title": "Unique Error Handler ID",
          "description": "The id of the error handler to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "when"
          ],
          "properties": {
            "realm": {
              "type": "string",
              "title": "The WWW-Authenticate Realm",
              "description": "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier.",
              "default": "Please authenticate."
            },
            "when": {
              "$ref": "#/definitions/errorsWhen"
            }
          }
        }
      }
    },
    "errorsHandlerJsonResponse": {
      "title": "JSON Response Error Handler",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "json"
        },
        "id": {
          "type": "string",
          "title": "Unique Error Handler ID",
          "description": "The id of the error handler to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "verbose": {
              "type": "boolean"
            },
            "when": {
              "$ref": "#/definitions/errorsWhen"
            }
          }
        }
      }
    },
    "errorsHandlerRedirect": {
      "title": "Redirect Error Handler",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "id",
        "type",
        "config"
      ],
      "properties": {
        "type": {
          "const": "redirect"
        },
        "id": {
          "type": "string",
          "title": "Unique Error Handler ID",
          "description": "The id of the error handler to be used in the rule definition"
        },
        "config": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "to"
          ],
          "properties": {
            "to": {
              "title": "Redirect to",
              "description": "Set the redirect target. Can either be a http/https URL, or a relative URL.",
              "type": "string",
              "format": "uri-reference",
              "examples": [
                "http://my-app.com/dashboard",
                "https://my-app.com/dashboard",
                "/dashboard"
              ]
            },
            "code": {
              "title": "HTTP Redirect Status Code",
              "description": "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found).",
              "type": "integer",
              "enum": [
                301,
                302
              ],
              "default": 302
            },
            "return_to_query_param": {
              "title": "URL query parameter",
              "description": "Adds the original URL the request tried to access to the query parameter.",
              "type": "string",
              "pattern": "^[A-Za-z0-9,._~-]*$",
              "default": ""
            },
            "when": {
              "$ref": "#/definitions/errorsWhen"
            }
          }
        }
      }
    },
    "fileProvider": {
      "description": "Enables file backend to load rules from",
      "type": "object",
      "additionalProperties": false,
      "oneOf": [
        {
          "required": [
            "directory"
          ]
        },
        {
          "required": [
            "filename"
          ]
        }
      ],
      "properties": {
        "watch": {
          "description": "watch this provider for changes",
          "type": "boolean",
          "default": false
        },
        "directory": {
          "description": "Load rules from one or more rule files",
          "type": "string"
        },
        "filename": {
          "description": "load rules from a file",
          "type": "string"
        }
      }
    },
    "dockerProvider": {
      "description": "Enables docker backend to load rules from label annotations",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "endpoint": {
          "description": "docker server endpoint. Can be tcp or socket endpoint.",
          "type": "string"
        },
        "timeout": {
          "description": "Client timeout settings for HTTP connections",
          "type": "string",
          "default": "1s",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
        }
      }
    },
    "kubernetesCrdProvider": {
      "description": "Enables kubernetes crd backend to load rules from kubernetes crd",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "namespaces": {
          "description": "Kubernetes namespaces",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "label_selector": {
          "description": "Kubernetes label selector to use",
          "type": "string"
        }
      }
    }
  },
  "properties": {
    "version": {
      "type": "string",
      "title": "The Heimdall version this config is written for.",
      "description": "SemVer according to https://semver.org/ prefixed with `v` as in our releases.",
      "pattern": "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "serve": {
      "title": "HTTP(s) configuration of exposed services",
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "api": {
          "$ref": "#/definitions/serviceConfig"
        },
        "proxy": {
          "$ref": "#/definitions/serviceConfig"
        },
        "prometheus": {
          "$ref": "#/definitions/prometheusConfig"
        }
      }
    },
    "log": {
      "title": "Log",
      "description": "Configure logging using the following options. Logging will always be sent to stdout and stderr.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Debug enables stack traces on errors. Can also be set using environment variable LOG_LEVEL.",
          "type": "string",
          "default": "info",
          "enum": [
            "trace",
            "debug",
            "info",
            "warning",
            "error",
            "fatal",
            "panic"
          ]
        },
        "leak_sensitive_values": {
          "type": "boolean",
          "title": "Leak Sensitive Log Values",
          "description": "If set will leak sensitive values (e.g. emails) in the logs."
        },
        "format": {
          "description": "The log format can either be text or JSON.",
          "type": "string",
          "enum": [
            "json",
            "text"
          ]
        }
      },
      "additionalProperties": false
    },
    "pipeline": {
      "description": "Individual pipeline handlers used by rules",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "authenticators",
        "authorizers",
        "mutators"
      ],
      "properties": {
        "error_handlers": {
          "description": "Individual Error Handler Configurations",
          "type": "array",
          "additionalItems": false,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/errorHandlerWWWAuthenticate"
              },
              {
                "$ref": "#/definitions/errorsHandlerRedirect"
              },
              {
                "$ref": "#/definitions/errorsHandlerJsonResponse"
              }
            ]
          }
        },
        "authenticators": {
          "title": "Authenticators",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/authenticatorAnonymous"
              },
              {
                "$ref": "#/definitions/authenticatorNoop"
              },
              {
                "$ref": "#/definitions/authenticatorUnauthorized"
              },
              {
                "$ref": "#/definitions/authenticatorAuthenticationData"
              },
              {
                "$ref": "#/definitions/authenticatorOAuth2Introspection"
              },
              {
                "$ref": "#/definitions/authenticatorJwt"
              }
            ]
          }
        },
        "authorizers": {
          "title": "Authorizers",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/authorizerAllow"
              },
              {
                "$ref": "#/definitions/authorizerDeny"
              },
              {
                "$ref": "#/definitions/authorizerRemote"
              }
            ]
          }
        },
        "hydrators": {
          "title": "Hydrators",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/hydratorDefault"
          }
        },
        "mutators": {
          "title": "Mutators",
          "type": "array",
          "additionalItems": false,
          "uniqueItems": true,
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/mutatorNoop"
              },
              {
                "$ref": "#/definitions/mutatorJwt"
              },
              {
                "$ref": "#/definitions/mutatorHeader"
              },
              {
                "$ref": "#/definitions/mutatorCookie"
              }
            ]
          }
        }
      }
    },
    "rules": {
      "description": "Rules to use",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "providers": {
          "description": "Where to load rules from",
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/definitions/fileProvider"
            },
            "docker": {
              "$ref": "#/definitions/dockerProvider"
            },
            "kubernetes_crd": {
              "$ref": "#/definitions/kubernetesCrdProvider"
            }
          }
        },
        "default": {
          "description": "Defines the fallbacks for any rule if a particular handler is not defined",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "authenticators": {
              "title": "Fallback authenticators",
              "description": "The list should contain the ids of the authenticators. Order matters",
              "type": "array",
              "additionalItems": false,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "authorizer": {
              "title": "Fallback authorizer",
              "type": "string"
            },
            "mutator": {
              "title": "Fallback mutator",
              "type": "string"
            },
            "error_handlers": {
              "title": "Fallback error handlers",
              "description": "The list should contain the ids of the error handlers. Order matters",
              "type": "array",
              "additionalItems": false,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}